/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compiladorjava;

import java.awt.Color;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;

/**
 *
 * @author matie
 */
public class IDE extends javax.swing.JFrame {

    private NumeroLinea numeroLinea;
    private Directorio dir;

    private ArrayList<Token> tokens;
    private ArrayList<ErrorLSSL> errors;
    private ArrayList<Production> identProd;
    private ArrayList<TextColor> textsColor;
    private HashMap<String, String> identificadores;
    private boolean codeHasBeenCompiled = false;

    /**
     * Creates new form IDE
     */
    public IDE() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new javax.swing.JButton();
        btnCompilar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        btnReserved = new javax.swing.JButton();
        btnTokens = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtpCode = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaCompile = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTokens = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/Icon/icons8_save_48px.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar documento");
        btnGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/pressed/icons8_save_48px_p.png"))); // NOI18N
        btnGuardar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/On Layer/icons8_save_48px_on.png"))); // NOI18N
        btnGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        getContentPane().add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 10, 80, 70));

        btnCompilar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/Icon/icons8_code_48px.png"))); // NOI18N
        btnCompilar.setText("Compilar");
        btnCompilar.setToolTipText("Compilar");
        btnCompilar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCompilar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/pressed/icons8_code_48px_p.png"))); // NOI18N
        btnCompilar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/On Layer/icons8_code_48px_on.png"))); // NOI18N
        btnCompilar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCompilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 10, 90, 70));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/Icon/icons8_code_file_48px.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.setToolTipText("Nuevo documento");
        btnNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNuevo.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/pressed/icons8_code_file_48px_p.png"))); // NOI18N
        btnNuevo.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/On Layer/icons8_code_file_48px_on.png"))); // NOI18N
        btnNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 80, 70));

        btnAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/Icon/icons8_opened_folder_48px.png"))); // NOI18N
        btnAbrir.setText("Abrir");
        btnAbrir.setToolTipText("Abrir documento");
        btnAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAbrir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/pressed/icons8_opened_folder_48px_P.png"))); // NOI18N
        btnAbrir.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/On Layer/icons8_opened_folder_48px_ON.png"))); // NOI18N
        btnAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        getContentPane().add(btnAbrir, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 80, 70));

        btnReserved.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/Icon/icons8-text-color-48.png"))); // NOI18N
        btnReserved.setText("Reservadas");
        btnReserved.setToolTipText("Palabras reservadas");
        btnReserved.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReserved.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/pressed/icons8-text-color-48.png"))); // NOI18N
        btnReserved.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/On Layer/icons8-text-color-48.png"))); // NOI18N
        btnReserved.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReserved.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservedActionPerformed(evt);
            }
        });
        getContentPane().add(btnReserved, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 90, 70));

        btnTokens.setIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/Icon/icons8-index-48.png"))); // NOI18N
        btnTokens.setText("Tokens");
        btnTokens.setToolTipText("Tokens");
        btnTokens.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnTokens.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/pressed/icons8-index-48.png"))); // NOI18N
        btnTokens.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/compiladorjava/iconos/On Layer/icons8-index-48.png"))); // NOI18N
        btnTokens.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnTokens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTokensActionPerformed(evt);
            }
        });
        getContentPane().add(btnTokens, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 80, 70));

        jtpCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtpCodeKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jtpCode);
        jtpCode.getAccessibleContext().setAccessibleName("");

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 950, 270));

        jtaCompile.setColumns(20);
        jtaCompile.setRows(5);
        jScrollPane2.setViewportView(jtaCompile);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 390, 940, 140));

        tblTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Componente léxico", "Lexema", "[Línea, Columna]"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTokens.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblTokens);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 100, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        dir.Guardar(this);
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        // TODO add your handling code here:
        if (getTitle().contains("*") || getTitle().equals("[#compiladorJAVA]")) {
            if (dir.Guardar(this)) {
                compile();
            }
        } else {
            compile();
        }
    }//GEN-LAST:event_btnCompilarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        jtaCompile.setText("");
        dir.Nuevo(this);
        clearAllFields();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        // TODO add your handling code here:
        dir.Abrir(this);
        clearAllFields();
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnReservedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservedActionPerformed
        // TODO add your handling code here:
        colorAnalysis();
    }//GEN-LAST:event_btnReservedActionPerformed

    private void btnTokensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTokensActionPerformed
        // TODO add your handling code here:
        clearAllFields();
        lexicalAnalysis();
        fillTableTokens();
    }//GEN-LAST:event_btnTokensActionPerformed

    private void jtpCodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtpCodeKeyReleased
        // TODO add your handling code here:
        int keyCode = evt.getKeyCode();
        if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 48 && keyCode <= 57)
                || (keyCode >= 97 && keyCode <= 122) || (keyCode != 27 && !(keyCode >= 37
                && keyCode <= 40) && !(keyCode >= 16
                && keyCode <= 18) && keyCode != 524
                && keyCode != 20)) {

            if (!getTitle().contains("*")) {
                setTitle(getTitle() + "*");
            }
        }
    }//GEN-LAST:event_jtpCodeKeyReleased

    /**
     * @param args the command line arguments
     */

    private void init() {
        setLocationRelativeTo(null); //
        dir = new Directorio();

        setTitle("[#compiladorJAVA]");
        String[] options = new String[]{"Guardar y Continuar", "Descartar"};

        //Numero de linea en el IDE
        numeroLinea = new NumeroLinea(jtpCode);
        jScrollPane1.setRowHeaderView(numeroLinea);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                dir.Exit(IDE.this);
                System.exit(0);
            }
        });

        tokens = new ArrayList<>();
        errors = new ArrayList<>();
        textsColor = new ArrayList<>();
        identProd = new ArrayList<>();
        identificadores = new HashMap<>();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    public void clearAllFields() {
        Functions.clearDataInTable(tblTokens);
        jtaCompile.setText("");
        tokens.clear();
        errors.clear();
        identProd.clear();
        identificadores.clear();
        codeHasBeenCompiled = false;
    }

    private void compile() {
        clearAllFields();
        lexicalAnalysis();
        fillTableTokens();
        syntacticAnalysis();
        semanticAnalysis();
        printConsole();
        codeHasBeenCompiled = true;
    }

    private void lexicalAnalysis() {
        // Extraer tokens
        Lexer lexer;
        try {
            File codigo = new File("code.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpCode.getText().getBytes();
            output.write(bytesText); 
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF8"));
            lexer = new Lexer(entrada);
            while (true) {
                Token token = lexer.yylex();
                if (token == null) {
                    break;
                }
                tokens.add(token);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
    }

    private void fillTableTokens() {
        tokens.forEach(token -> {
            Object[] data = new Object[]{token.getLexicalComp(), token.getLexeme(), "[" + token.getLine() + ", " + token.getColumn() + "]"};
            Functions.addRowDataInTable(tblTokens, data);
        });
    }

    private void syntacticAnalysis() {
        Grammar gramatica = new Grammar(tokens, errors);

        /*Elimina errores*/
        gramatica.delete(new String[]{"ERROR", "ERROR_1", "ERROR_2"}, 1);

        /*Agrupación de valores*/
        gramatica.group("VALOR", "(NUMERO_DOUBLE | NUMERO_LONG)", true);

        /*Declara variables con Operadores Aritméticos*/
        gramatica.group("VARIABLE_OA", "TIPO_DATO IDENTIFICADOR OP_ASIG VALOR OPE_ARIT VALOR", true, identProd); 
        
        gramatica.finalLineColumn();

        gramatica.group("VARIABLE_OA", "TIPO_DATO IDENTIFICADOR OP_ASIG VALOR OPE_ARIT", true, 2,
                "Error sintáctico {}: falta el valor de la variable despues del operador aritmético [#, %]");

        gramatica.initialLineColumn();
        
        /*Declaración de variables*/
        gramatica.group("VARIABLE", "TIPO_DATO IDENTIFICADOR OP_ASIG VALOR", true, identProd);
        gramatica.group("VARIABLE", "TIPO_DATO OP_ASIG VALOR", true, 2,
                "Error sintáctico {}: falta el identificador en la variable [#, %]");

        gramatica.finalLineColumn();

        gramatica.group("VARIABLE", "TIPO_DATO IDENTIFICADOR OP_ASIG", true, 2,
                "Error sintáctico {}: falta el valor de la variable [#, %]");

        gramatica.initialLineColumn();
        /*Agregar mas casos de errores*/

        /*Elimina tipos de datos y operadores de asignación*/
        gramatica.delete("TIPO_DATO", 4,
                "Error sintáctico {}: el tipo de dato no esta en una declaración [#, %]");
        gramatica.delete("OP_ASIG", 5,
                "Error sintáctico {}: el operador de asignación no esta en una declaración [#, %]");

        /*Agrupa identificadores, define parámetros y valores con operadores lógicos*/
        gramatica.group("VALOR", "IDENTIFICADOR", true);
        gramatica.group("PARAMETROS", "VALOR (COMA VALOR)+");
        gramatica.group("VALOR_OL", "VALOR OPE_LOG VALOR");

        /*Agrupa funciones*/
        gramatica.group("FUNCION", "(READ | WRITE)", true);
        gramatica.group("FUNCION_COMP", "FUNCION PARENTESIS_A (VALOR | PARAMETROS)? PARENTESIS_C", true);
        gramatica.group("FUNCION_COMP", "FUNCION (VALOR | PARAMETROS)? PARENTESIS_C", true, 6,
                "Error sintáctico {}: falta el paréntesis que abre en la función[#, %]");

        gramatica.finalLineColumn();
        gramatica.group("FUNCION_COMP", "FUNCION PARENTESIS_A(VALOR | PARAMETROS)", true, 7,
                "Error sintáctico {}: falta el paréntesis que cierra en la función[#, %]");
        gramatica.initialLineColumn();

        /*Elimina funciones incompletas*/
        gramatica.delete("FUNCION", 8, "Error sintáctico {}: la función no está declarada correctamente [#, %]");

        /*Agrupa estructuras de control*/
        //gramatica.group("EST_CONTROL_WHILE", "WHILE PARENTESIS_A PARENTESIS_C");
        gramatica.group("EST_CONTROL_WHILE", "WHILE (VALOR_OL | VALOR | PARAMETROS)");
        gramatica.group("EST_CONTROL_WHILE", "WHILE PARENTESIS_A (VALOR_OL | VALOR | PARAMETROS)? PARENTESIS_C");

        /*Eliminar estructuras incompletas*/
        gramatica.delete("WHILE", 9, "Error sintáctico {}: la estructura while no está declarada correctamente [#, %]");

        //gramatica.group("EST_CONTROL_IF", "IF PARENTESIS_A PARENTESIS_C THEN");
        gramatica.group("EST_CONTROL_IF", "IF (VALOR_OL | VALOR | PARAMETROS) THEN");
        gramatica.group("EST_CONTROL_IF", "IF PARENTESIS_A (VALOR_OL | VALOR | PARAMETROS)? PARENTESIS_C THEN");

        /*Eliminar estructuras incompletas*/
        gramatica.delete("IF", 10, "Error sintáctico {}: la estructura if no está declarada correctamente [#, %]");

        /*Eliminar parentesis*/
        gramatica.delete(new String[]{"PARENTESIS_A", "PARENTESIS_C"}, 11,
                "Error sintáctico {}: el paréntesis [] no esta contenido en la agrupación[#, %]");

        gramatica.finalLineColumn();

        /*Verifica ; al final de una sentencia*/
        // Identificadores o variables
        gramatica.group("VARIABLE_PC", "VARIABLE PUNTO_COMA", true);
        gramatica.group("VARIABLE_PC", "VARIABLE", true, 12,
                "Error sintáctico {}: falta el punto y coma al final de la variable[#, %]");
        // Funciones
        gramatica.group("FUNCION_COMP_PC", "FUNCION_COMP PUNTO_COMA");
        gramatica.group("FUNCION_COMP_PC", "FUNCION_COMP", 13,
                "Error sintáctico {}: falta el punto y coma al final de la declaración de función[#, %]");
        gramatica.initialLineColumn();
        //
        gramatica.group("VARIABLE_PC_OA", "VARIABLE_OA PUNTO_COMA", true);
        gramatica.group("VARIABLE_PC_OA", "VARIABLE_OA", true, 12,
                "Error sintáctico {}: falta el punto y coma al final de la variable[#, %]");
        
        /*Elimina ;*/
        gramatica.delete("PUNTO_COMA", 14,
                "Error sintáctico {}: el punto y coma no está al final de las sentencia[#, %]");

        /*Sentencias*/
        gramatica.group("SENTENCIAS", "(VARIABLE_PC | VARIABLE_PC_OA | FUNCION_COMP_PC)+");

        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_WHILE LLAVE_A (SENTENCIAS | SENTENCIAS BREAK | BREAK)? LLAVE_C", true);
            gramatica.group("SENTENCIAS", "(SENTENCIAS | EST_CONTROL_COMP_LASLC)+");
        });

        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF LLAVE_A (SENTENCIAS)? LLAVE_C ELSE LLAVE_A (SENTENCIAS)? LLAVE_C", true);
            gramatica.group("SENTENCIAS", "(SENTENCIAS | EST_CONTROL_COMP_LASLC)+");
        });

        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF LLAVE_A (SENTENCIAS)? LLAVE_C", true);
            gramatica.group("SENTENCIAS", "(SENTENCIAS | EST_CONTROL_COMP_LASLC)+");
        });

        /*Estructuras de función incompletas*/
        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.initialLineColumn();

            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_WHILE (SENTENCIAS)?", true,
                    15, "Error sintáctico {}: faltan llaves[#, %]");
            
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_WHILE (SENTENCIAS)? LLAVE_C", true,
                    15, "Error sintáctico {}: falta la llave que abre la estructura de control[#, %]");

            gramatica.finalLineColumn();

            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_WHILE LLAVE_A SENTENCIAS", true,
                    15, "Error sintáctico {}: falta la llave que cierra la estructura de control[#, %]");

            gramatica.group("SENTENCIAS", "(SENTENCIAS | EST_CONTROL_COMP_LASLC)");
        });

        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.initialLineColumn();
            
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF (SENTENCIAS)?", true,
                    15, "Error sintáctico {}: faltan llaves[#, %]");
            
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF (SENTENCIAS)? LLAVE_C", true,
                    15, "Error sintáctico {}: falta la llave que abre la estructura de control[#, %]");

            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF LLAVE_A SENTENCIAS", true,
                    15, "Error sintáctico {}: falta la llave que cierra la estructura de control[#, %]");

            gramatica.group("SENTENCIAS", "(SENTENCIAS | EST_CONTROL_COMP_LASLC)");

            gramatica.finalLineColumn();
        });

        gramatica.loopForFunExecUntilChangeNotDetected(() -> {
            gramatica.initialLineColumn();

            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF LLAVE_A (SENTENCIAS)? LLAVE_C ELSE (SENTENCIAS)?", true, //no funciona
                    15, "Error sintáctico {}: faltan llaves[#, %]");
            
            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF (SENTENCIAS)? LLAVE_C ELSE LLAVE_A (SENTENCIAS)? LLAVE_C", true,
                    15, "Error sintáctico {}: falta la llave que abre la estructura de control[#, %]");

            gramatica.group("EST_CONTROL_COMP_LASLC", "EST_CONTROL_IF LLAVE_A SENTENCIAS ELSE LLAVE_A (SENTENCIAS)? LLAVE_C", true,
                    15, "Error sintáctico {}: falta la llave que cierra la estructura de control[#, %]");

            gramatica.group("SENTENCIAS", "(SENTENCIAS | EST_CONTROL_COMP_LASLC)");

            gramatica.finalLineColumn();
        });

        /*Elimina llaves*/
        gramatica.delete(new String[]{"LLAVE_A", "LLAVE_C"}, 16,
                "Error sintáctico {}: la llave [] no esta contenida en la agrupación[#, %]");

        gramatica.show();
    }

    private void semanticAnalysis() {
        HashMap<String, String> identDataType = new HashMap<>(); //HashMap -> es como un diccionario
        identDataType.put("long", "NUMERO_LONG");
        identDataType.put("double", "NUMERO_DOUBLE");

        for (Production id : identProd) {
            if (!identDataType.get(id.lexemeRank(0)).equals(id.lexicalCompRank(-1))) {
                errors.add(new ErrorLSSL(1, "Error semántico {}: valor no compatible con el tipo de dato[#, %]", id, true));
            } else if (id.lexicalCompRank(-1).equals("NUMERO_DOUBLE") && !id.lexemeRank(-1).matches("[0-9]+.[0-9]+")) {
                errors.add(new ErrorLSSL(2, "Error semántico {}: el valor no es un numero decimal[#, %]", id, false));
            } else {
                identificadores.put(id.lexemeRank(1), id.lexemeRank(-1));
            }
        }
    }

    private void colorAnalysis() {
        /* Limpiar el arreglo de colores */
        textsColor.clear();
        /* Extraer rangos de colores */
        LexerColor lexerColor;
        try {
            File codigo = new File("color.encrypter");
            FileOutputStream output = new FileOutputStream(codigo);
            byte[] bytesText = jtpCode.getText().getBytes();
            output.write(bytesText);
            BufferedReader entrada = new BufferedReader(new InputStreamReader(new FileInputStream(codigo), "UTF8"));
            lexerColor = new LexerColor(entrada);
            while (true) {
                TextColor textColor = lexerColor.yylex();
                if (textColor == null) {
                    break;
                }
                textsColor.add(textColor);
            }
        } catch (FileNotFoundException ex) {
            System.out.println("El archivo no pudo ser encontrado... " + ex.getMessage());
        } catch (IOException ex) {
            System.out.println("Error al escribir en el archivo... " + ex.getMessage());
        }
        Functions.colorTextPane(textsColor, jtpCode, new Color(40, 40, 40));
    }

    private void printConsole() {
        int sizeErrors = errors.size();

        if (sizeErrors > 0) {
            Functions.sortErrorsByLineAndColumn(errors);
            String strErrors = "\n";
            for (ErrorLSSL error : errors) {
                String strError = String.valueOf(error);
                strErrors += strError + "\n";
            }
            jtaCompile.setText("Compilación terminada...\n" + strErrors + "\nLa compilación terminó con errores...");
        } else {
            jtaCompile.setText("Compilación terminada...");
        }
        jtaCompile.setCaretPosition(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReserved;
    private javax.swing.JButton btnTokens;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTextArea jtaCompile;
    public javax.swing.JTextPane jtpCode;
    private javax.swing.JTable tblTokens;
    // End of variables declaration//GEN-END:variables
}
